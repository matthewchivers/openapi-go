/*
 * Galasa Runs Requests
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.15.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package runs

import (
	"encoding/json"
)

// TestRun struct for TestRun
type TestRun struct {
	// The run name
	Name *string `json:"name,omitempty"`
	// The type of request, ie REQUEST, JENKINS, LOCAL
	Type *string `json:"type,omitempty"`
	// the group ID assigned to this run
	Group *string `json:"group,omitempty"`
	// the full test name in bundle/test format
	Test *string `json:"test,omitempty"`
	// the bundle name
	BundleName *string `json:"bundleName,omitempty"`
	// the test class name
	TestName *string `json:"testName,omitempty"`
	// the current status of the run, ie allocated, starting, building etc
	Status *string `json:"status,omitempty"`
	// when the test was queued
	Queued *string `json:"queued,omitempty"`
	// who requested the run
	Requestor *string `json:"requestor,omitempty"`
	// the test stream the test should be loaded from
	Stream *string `json:"stream,omitempty"`
	// the maven repositories to be used
	Repo *string `json:"repo,omitempty"`
	// the obrs to be used
	Obr *string `json:"obr,omitempty"`
	// is this a local run
	Local *bool `json:"local,omitempty"`
	// has trace been requested
	Trace *bool `json:"trace,omitempty"`
}

// NewTestRun instantiates a new TestRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRun() *TestRun {
	this := TestRun{}
	return &this
}

// NewTestRunWithDefaults instantiates a new TestRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunWithDefaults() *TestRun {
	this := TestRun{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TestRun) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TestRun) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TestRun) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TestRun) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TestRun) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TestRun) SetType(v string) {
	o.Type = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *TestRun) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *TestRun) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *TestRun) SetGroup(v string) {
	o.Group = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *TestRun) GetTest() string {
	if o == nil || o.Test == nil {
		var ret string
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestOk() (*string, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *TestRun) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given string and assigns it to the Test field.
func (o *TestRun) SetTest(v string) {
	o.Test = &v
}

// GetBundleName returns the BundleName field value if set, zero value otherwise.
func (o *TestRun) GetBundleName() string {
	if o == nil || o.BundleName == nil {
		var ret string
		return ret
	}
	return *o.BundleName
}

// GetBundleNameOk returns a tuple with the BundleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetBundleNameOk() (*string, bool) {
	if o == nil || o.BundleName == nil {
		return nil, false
	}
	return o.BundleName, true
}

// HasBundleName returns a boolean if a field has been set.
func (o *TestRun) HasBundleName() bool {
	if o != nil && o.BundleName != nil {
		return true
	}

	return false
}

// SetBundleName gets a reference to the given string and assigns it to the BundleName field.
func (o *TestRun) SetBundleName(v string) {
	o.BundleName = &v
}

// GetTestName returns the TestName field value if set, zero value otherwise.
func (o *TestRun) GetTestName() string {
	if o == nil || o.TestName == nil {
		var ret string
		return ret
	}
	return *o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTestNameOk() (*string, bool) {
	if o == nil || o.TestName == nil {
		return nil, false
	}
	return o.TestName, true
}

// HasTestName returns a boolean if a field has been set.
func (o *TestRun) HasTestName() bool {
	if o != nil && o.TestName != nil {
		return true
	}

	return false
}

// SetTestName gets a reference to the given string and assigns it to the TestName field.
func (o *TestRun) SetTestName(v string) {
	o.TestName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TestRun) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TestRun) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TestRun) SetStatus(v string) {
	o.Status = &v
}

// GetQueued returns the Queued field value if set, zero value otherwise.
func (o *TestRun) GetQueued() string {
	if o == nil || o.Queued == nil {
		var ret string
		return ret
	}
	return *o.Queued
}

// GetQueuedOk returns a tuple with the Queued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetQueuedOk() (*string, bool) {
	if o == nil || o.Queued == nil {
		return nil, false
	}
	return o.Queued, true
}

// HasQueued returns a boolean if a field has been set.
func (o *TestRun) HasQueued() bool {
	if o != nil && o.Queued != nil {
		return true
	}

	return false
}

// SetQueued gets a reference to the given string and assigns it to the Queued field.
func (o *TestRun) SetQueued(v string) {
	o.Queued = &v
}

// GetRequestor returns the Requestor field value if set, zero value otherwise.
func (o *TestRun) GetRequestor() string {
	if o == nil || o.Requestor == nil {
		var ret string
		return ret
	}
	return *o.Requestor
}

// GetRequestorOk returns a tuple with the Requestor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetRequestorOk() (*string, bool) {
	if o == nil || o.Requestor == nil {
		return nil, false
	}
	return o.Requestor, true
}

// HasRequestor returns a boolean if a field has been set.
func (o *TestRun) HasRequestor() bool {
	if o != nil && o.Requestor != nil {
		return true
	}

	return false
}

// SetRequestor gets a reference to the given string and assigns it to the Requestor field.
func (o *TestRun) SetRequestor(v string) {
	o.Requestor = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *TestRun) GetStream() string {
	if o == nil || o.Stream == nil {
		var ret string
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetStreamOk() (*string, bool) {
	if o == nil || o.Stream == nil {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *TestRun) HasStream() bool {
	if o != nil && o.Stream != nil {
		return true
	}

	return false
}

// SetStream gets a reference to the given string and assigns it to the Stream field.
func (o *TestRun) SetStream(v string) {
	o.Stream = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *TestRun) GetRepo() string {
	if o == nil || o.Repo == nil {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetRepoOk() (*string, bool) {
	if o == nil || o.Repo == nil {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *TestRun) HasRepo() bool {
	if o != nil && o.Repo != nil {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *TestRun) SetRepo(v string) {
	o.Repo = &v
}

// GetObr returns the Obr field value if set, zero value otherwise.
func (o *TestRun) GetObr() string {
	if o == nil || o.Obr == nil {
		var ret string
		return ret
	}
	return *o.Obr
}

// GetObrOk returns a tuple with the Obr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetObrOk() (*string, bool) {
	if o == nil || o.Obr == nil {
		return nil, false
	}
	return o.Obr, true
}

// HasObr returns a boolean if a field has been set.
func (o *TestRun) HasObr() bool {
	if o != nil && o.Obr != nil {
		return true
	}

	return false
}

// SetObr gets a reference to the given string and assigns it to the Obr field.
func (o *TestRun) SetObr(v string) {
	o.Obr = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *TestRun) GetLocal() bool {
	if o == nil || o.Local == nil {
		var ret bool
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetLocalOk() (*bool, bool) {
	if o == nil || o.Local == nil {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *TestRun) HasLocal() bool {
	if o != nil && o.Local != nil {
		return true
	}

	return false
}

// SetLocal gets a reference to the given bool and assigns it to the Local field.
func (o *TestRun) SetLocal(v bool) {
	o.Local = &v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *TestRun) GetTrace() bool {
	if o == nil || o.Trace == nil {
		var ret bool
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRun) GetTraceOk() (*bool, bool) {
	if o == nil || o.Trace == nil {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *TestRun) HasTrace() bool {
	if o != nil && o.Trace != nil {
		return true
	}

	return false
}

// SetTrace gets a reference to the given bool and assigns it to the Trace field.
func (o *TestRun) SetTrace(v bool) {
	o.Trace = &v
}

func (o TestRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	if o.BundleName != nil {
		toSerialize["bundleName"] = o.BundleName
	}
	if o.TestName != nil {
		toSerialize["testName"] = o.TestName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Queued != nil {
		toSerialize["queued"] = o.Queued
	}
	if o.Requestor != nil {
		toSerialize["requestor"] = o.Requestor
	}
	if o.Stream != nil {
		toSerialize["stream"] = o.Stream
	}
	if o.Repo != nil {
		toSerialize["repo"] = o.Repo
	}
	if o.Obr != nil {
		toSerialize["obr"] = o.Obr
	}
	if o.Local != nil {
		toSerialize["local"] = o.Local
	}
	if o.Trace != nil {
		toSerialize["trace"] = o.Trace
	}
	return json.Marshal(toSerialize)
}

type NullableTestRun struct {
	value *TestRun
	isSet bool
}

func (v NullableTestRun) Get() *TestRun {
	return v.value
}

func (v *NullableTestRun) Set(val *TestRun) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRun) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRun(val *TestRun) *NullableTestRun {
	return &NullableTestRun{value: val, isSet: true}
}

func (v NullableTestRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


