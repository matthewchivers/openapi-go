/*
 * Galasa Runs Requests
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.15.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package runs.api.galasa.dev

import (
	"encoding/json"
)

// TestRuns struct for TestRuns
type TestRuns struct {
	Complete *bool `json:"complete,omitempty"`
	Runs *[]TestRun `json:"runs,omitempty"`
}

// NewTestRuns instantiates a new TestRuns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestRuns() *TestRuns {
	this := TestRuns{}
	return &this
}

// NewTestRunsWithDefaults instantiates a new TestRuns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestRunsWithDefaults() *TestRuns {
	this := TestRuns{}
	return &this
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *TestRuns) GetComplete() bool {
	if o == nil || o.Complete == nil {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRuns) GetCompleteOk() (*bool, bool) {
	if o == nil || o.Complete == nil {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *TestRuns) HasComplete() bool {
	if o != nil && o.Complete != nil {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *TestRuns) SetComplete(v bool) {
	o.Complete = &v
}

// GetRuns returns the Runs field value if set, zero value otherwise.
func (o *TestRuns) GetRuns() []TestRun {
	if o == nil || o.Runs == nil {
		var ret []TestRun
		return ret
	}
	return *o.Runs
}

// GetRunsOk returns a tuple with the Runs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestRuns) GetRunsOk() (*[]TestRun, bool) {
	if o == nil || o.Runs == nil {
		return nil, false
	}
	return o.Runs, true
}

// HasRuns returns a boolean if a field has been set.
func (o *TestRuns) HasRuns() bool {
	if o != nil && o.Runs != nil {
		return true
	}

	return false
}

// SetRuns gets a reference to the given []TestRun and assigns it to the Runs field.
func (o *TestRuns) SetRuns(v []TestRun) {
	o.Runs = &v
}

func (o TestRuns) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Complete != nil {
		toSerialize["complete"] = o.Complete
	}
	if o.Runs != nil {
		toSerialize["runs"] = o.Runs
	}
	return json.Marshal(toSerialize)
}

type NullableTestRuns struct {
	value *TestRuns
	isSet bool
}

func (v NullableTestRuns) Get() *TestRuns {
	return v.value
}

func (v *NullableTestRuns) Set(val *TestRuns) {
	v.value = val
	v.isSet = true
}

func (v NullableTestRuns) IsSet() bool {
	return v.isSet
}

func (v *NullableTestRuns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestRuns(val *TestRuns) *NullableTestRuns {
	return &NullableTestRuns{value: val, isSet: true}
}

func (v NullableTestRuns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestRuns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


